apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

if (file("./google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
}

def secretsFile = file('../secrets.properties')
def secrets = new Properties()
if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
}

android {
    namespace "uk.ac.lshtm.keppel.android"

    compileSdk rootProject.ext.compileSdkVersion
    ndkVersion rootProject.ext.ndkVersion

    defaultConfig {
        applicationId "uk.ac.lshtm.keppel.android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 43
        versionName "0.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        testOptions {
            unitTests {
                includeAndroidResources = true
            }
        }
    }

    signingConfigs {
        release {
            if (secrets.getProperty('KEYSTORE')) {
                storeFile file(secrets.getProperty('KEYSTORE'))
                storePassword secrets.getProperty('KEYSTORE_PASSWORD')
                keyAlias secrets.getProperty('KEY_ALIAS')
                keyPassword secrets.getProperty('KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "ANALYTICS_CLASS", "null"
        }

        release {
            if (secrets.getProperty('KEYSTORE')) {
                signingConfig signingConfigs.release
            }

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (file("google-services.json").exists()) {
                buildConfigField "String", "ANALYTICS_CLASS", "\"uk.ac.lshtm.keppel.firebaseanalytics.FirebaseAnalytics\""
            } else {
                buildConfigField "String", "ANALYTICS_CLASS", "null"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
        }
    }
    lint {
        disable 'MissingTranslation'
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.kotlin.stdlib
    implementation libs.material
    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.play.services.oss.licenses
    implementation libs.androidx.preference.ktx
    implementation libs.sourceafis
    implementation project(':core')

    if (file("../mantramfs100/libs/mantra.mfs100.jar").exists()) {
        implementation project(':mantramfs100')
    }

    if (file("../biomini-aar/libBioMini.aar").exists()) {
        implementation project(':biomini')
    }

    if (file("./google-services.json").exists()) {
        implementation project(':firebase-analytics')
    }

    testImplementation libs.junit
    testImplementation libs.androidx.test.junit
    testImplementation libs.androidx.test.core.ktx
    testImplementation libs.robolectric
    testImplementation libs.androidx.espresso.core
    testImplementation libs.mockito.kotlin
    testImplementation libs.androidx.core.testing

    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.espresso.intents
}
